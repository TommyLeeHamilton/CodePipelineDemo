setup a free tier EC2 instance with 20GB storage

export public key from your ec2 jumpbox
TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
&& curl -H "X-aws-ec2-metadata-token: $TOKEN" â€“v http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > jumpbox-public.pem

install docker engine on your jumpbox
yes | sudo yum install update
yes | sudo yum install docker


setup cluster with eksctl:
eksctl create cluster \
--name istio-demo-lon \
--region us-east-2 \
--nodegroup-name standard-workers \
--node-type t3.medium \
--nodes 3 \
--nodes-min 1 \
--nodes-max 4 \
--ssh-access \
--ssh-public-key jumpbox-public.pem \
--managed

install kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl get nodes (should see 3 nodes listed)

Download and install Kustomize
curl -s -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
chmod u+x ./kustomize

download Istio and setup istioctl
curl -L https://istio.io/downloadIstio | sh -
cd istio-1.5.0
sudo cp ./bin/istioctl /usr/local/bin/istioctl
istioctl version

install istio: 
istioctl manifest apply --set profile=demo


Enable automatic side-car injection on default namespace:
kubectl label namespace default istio-injection=enabled

Create "Test" namespace (to be used later) and enable automatic side-car injection
kubectl create ns test
kubectl label namespace test istio-injection=enabled

Deploy Bookinfo demo application
kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml


Deploy gateway object to access from internet:
kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml


Get istio-ingress gateway URL
kubectl get service istio-ingressgateway -n istio-system
Browse to http://<External-IP URL>/productpage
http://ae113cae26ea411ea97a00ae70213a27-1654588950.us-east-2.elb.amazonaws.com/productpage
Refresh the page multiple times to see that there are 3 different versions of the ratings component of the demo site


Expose Kiali publicly (switch from NodePort to LoadBalancer type)
kubectl get service kiali -n istio-system -o yaml > kiali.yaml && sed -i "s/type: ClusterIP/type: LoadBalancer/g" kiali.yaml && kubectl apply -f kiali.yaml


Find the Kiali public URL
kubectl get service kiali -n istio-system
Browse to Kiali dashboard at http://<External-IP URL>:20001 and login as admin/admin
Go to "Graph", set namespace to "default", select "Versioned app graph", "Response time" and "Traffic Animation"
Go back to your Bookinfo site (http://<External-IP URL>/productpage), hit refresh a bunch of times, then go back to your kiali dashboard


Generate load from your jumpbox to your app
duplicate your putty session, login and run this command
sudo docker run -e REQUESTS_PER_SECOND=50 -e DURATION=10000 -e URL=http://a4ce609b86fa211eaabf20233ec314f0-1993229981.us-east-2.elb.amazonaws.com/productpage bunchjesse/loadtest
go back to your kiali dashboard

Create destination rules for your bookinfo services
kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml


Create virtual service to split traffic 50/50 between v1 and v3
kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml

Go back to your productpage website and hit refresh a few times, notice anything different?
Go to your kiali dashboard

Switch the traffic weight from 50/50 to 80/20
kubectl edit virtualservice reviews
Go to your kiali dashboard































